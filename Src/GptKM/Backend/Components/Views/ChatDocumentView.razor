@using GptLibrary.Models;
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.ProgressBar

@implements IRazorPage

@inject ChatDocumentViewModel ViewModel
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ProductLicense ProductLicense

<div class="chat">
    <div class="container">
        <div class="chat-records">

            @if (ViewModel.ChatDocumentModel.ChatDocumentItem.Count > 0)
            {
                foreach (var item in ViewModel.ChatDocumentModel.ChatDocumentItem)
                {
                    <div class="alert @item.SourceModifyClass" role="alert">
                        <disv class="row">
                            <div class="col">
                                @if (string.IsNullOrEmpty(item.Content) == false)
                                {
                                    bool isFirst = false;
                                    var messageItems = item.Content.Split("\n");
                                    foreach (var messageItem in messageItems)
                                    {
                                        @messageItem
                                        if (isFirst == true)
                                        {
                                            <br />
                                        }
                                        isFirst = true;
                                    }
                                }
                            </div>
                        </disv>
                    </div>
                }
            }

        </div>
    </div>
    <div class="info-container chat-input ">
        <div class="form-row">
            <div class="form-group col">
                <label for="Name" class="control-label">輸入你的問題</label>
                <div class="row">
                    <div class="col-11">
                        <SfTextBox Type="InputType.Password" Multiline="true"
                                   Placeholder="請使用自然語言來描述你的問題，越詳盡越好，更能夠精準找到更符合需求的文件內容  (換行，請使用 Shift + Enter)"
                                   rows="3"
                        @bind-Value="ViewModel.ChatEmbeddingModel.Question"
                        @onkeypress="OnKeyPress"></SfTextBox>
                    </div>
                    <div class="col-1 d-flex justify-content-center align-items-center">
                        @if (ViewModel.ChatEmbeddingModel.DoSearching == true)
                        {
                            <SfProgressBar Type="ProgressType.Circular" Value="20" Width="60px" Height="60px"
                                           StartAngle="180" EndAngle="180" CornerRadius="CornerType.Round"
                                           IsIndeterminate="true" Minimum="0" Maximum="100">
                                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0"></ProgressBarAnimation>
                            </SfProgressBar>
                        }
                        else
                        {
                            <span class="mdi mdi-36px mdi-send"
                                  title="搜尋文件" @onclick="DoSearchAsync"></span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<MessageBox Height="@ViewModel.MessageBox.Height" Width="@ViewModel.MessageBox.Width"
            IsVisible="@ViewModel.MessageBox.IsVisible"
            Title="@ViewModel.MessageBox.Title" Message="@ViewModel.MessageBox.Body"
            Callback="ViewModel.MessageBox.MessageDelegate" />

<DialogBackground />

@code {
    private ChatDocumentSpecificItem chatDocumentSpecificItem = new GptLibrary.Models.ChatDocumentSpecificItem();
    [Parameter]
    public ChatDocumentSpecificItem ChatDocumentSpecificItem
    {
        get { return chatDocumentSpecificItem; }
        set
        {
            chatDocumentSpecificItem = value;
            ViewModel.ChatDocumentSpecificItem = value;
        }
    }

    string versionNumber = "";

    protected override void OnInitialized()
    {
        versionNumber = ProductLicense.Version;
        ViewModel.Setup(this);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == true)
        {
            ViewModel.Setup(this);
        }
    }

    async Task OnKeyPress(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") &&
        e.AltKey == false && e.ShiftKey == false && e.CtrlKey == false)
        {
            await DoSearchAsync();
        }
    }

    async Task DoSearchAsync()
    {
        ViewModel.ChatEmbeddingModel.SearchResult.Clear();
        List<GptEmbeddingCosineResultItem> gptResult = await ViewModel.SendQuestionAsync();
        foreach (var item in gptResult)
        {
            ViewModel.ChatEmbeddingModel.SearchResult.Add(new SearchResult()
                {
                    GptEmbeddingItem = item.GptEmbeddingItem,
                    CosineSimilarity = String.Format("{0:0.0000}", item.CosineSimilarity),
                    ShowEmbeddingText = false
                });
        }
    }

    async Task DownloadFileAsync(SearchResult searchResult)
    {
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-7.0
        string filename = searchResult.GptEmbeddingItem.ExpertFileChunk.ExpertFile.FileName;
        string fullfilename = searchResult.GptEmbeddingItem.ExpertFileChunk.ExpertFile.FullName;

        var fileStream = ViewModel.GetFileStream(fullfilename);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }
    void Navigate(string path)
    {
        NavigationManager.NavigateTo(path, true);
    }

    #region 頁面需要介面實作
    public async Task NeedRefreshAsync()
    {
        await InvokeAsync(async () =>
        {
            await RenderDelayHelper.Delay();
            StateHasChanged();
        });
    }

    public async Task NeedInvokeAsync(System.Action action)
    {
        await InvokeAsync(action);
    }
    #endregion
}

