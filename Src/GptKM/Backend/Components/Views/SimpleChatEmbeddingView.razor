@using GptLibrary.Models;
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.ProgressBar

@inject ChatEmbeddingViewModel ViewModel
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="top-row px-4 header">
    <div class="d-flex float-start d-flex justify-content-center align-items-center mt-2">
        <span class="h2">耀瑄科技 智慧知識庫</span>
        <span class="mb-0 mx-2">版本:@versionNumber</span>
    </div>
    <div class="d-flex float-end h2 d-flex justify-content-center align-items-center">
        <span class="mdi mdi-24px mdi-logout mx-2 mt-2 text-danger" @onclick="@(()=>{Navigate("/Logout");})"></span>
        <span class="mdi mdi-24px mdi-check-circle mx-2 mt-2" @onclick="ViewModel.OpenUploadFileAsync"></span>
        <span class="mdi mdi-24px mdi-upload mt-2" @onclick="ViewModel.OpenUploadFileAsync"></span>
    </div>
</div>

<div class="chat">
    <div class="container">
        <div class="chat-records">

            @if (ViewModel.ChatEmbeddingModel.DoSearching == true)
            {
                <div class="d-flex align-items-center justify-content-center mt-auto">
                <SfProgressBar Type="ProgressType.Circular" Value="20" Width="160px" Height="160px"
                               StartAngle="180" EndAngle="180" CornerRadius="CornerType.Round"
                               IsIndeterminate="true" Minimum="0" Maximum="100">
                    <ProgressBarAnimation Enable="true" Duration="2000" Delay="0"></ProgressBarAnimation>
                </SfProgressBar>
                <div class="text-primary h2">處理中，請稍後</div>
                </div>

            }

            @if (ViewModel.ChatEmbeddingModel.SearchResult.Count > 0)
            {
                foreach (var item in ViewModel.ChatEmbeddingModel.SearchResult)
                {
                    <div class="alert alert-secondary my-1" role="alert">
                        <div class="row">
                            <div class="col-1">
                                @item.CosineSimilarity
                            </div>
                            <div class="col-1">
                                @item.GptEmbeddingItem.ExpertFileChunk.ConvertIndex
                            </div>
                            <div class="col-9" @onclick="()=>ViewModel.ShowChunkContext(item)">
                                <span class="mdi mdi-24px mdi-link-variant" ></span>
                                @item.GptEmbeddingItem.FileName
     
                            </div>
                            <div class="col-1">
                                <span class="mdi mdi-24px mdi-comment-question"
                                @onclick="async ()=>await ViewModel.GetAnswerAsync(item)"></span>
                                <span class="mdi mdi-24px mdi-download-box"
                                @onclick="async ()=>await DownloadFileAsync(item)"></span>
                            </div>
                        </div>


                        @if (item.DoAnswerSearching == true)
                        {
                            <div class="d-flex align-items-center justify-content-center mt-auto">
                            <SfProgressBar Type="ProgressType.Circular" Value="20" Width="60px" Height="60px"
                                           StartAngle="180" EndAngle="180" CornerRadius="CornerType.Round"
                                           IsIndeterminate="true" Minimum="0" Maximum="100" ProgressColor="Green">
                                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0"></ProgressBarAnimation>
                            </SfProgressBar>
                            <div class="text-primary h2">將此文件區塊交由 GPT 來回答問題中</div>
                            </div>
                        }

                        @if (item.ShowEmbeddingText == true)
                        {
                            <div class="alert alert-warning m-1" role="alert">
                                <div class="row mt-2">
                                    <div class="col">
                                        @item.GptEmbeddingItem.ChunkContent
                                    </div>
                                </div>
                            </div>
                        }

                        @if (string.IsNullOrEmpty(item.Answer) == false)
                        {
                            <div class="alert alert-success m-1" role="alert">
                                <div class="row mt-2">
                                    <div class="col">
                                        @item.Answer
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }

        </div>
    </div>
    <div class="info-container chat-input ">
        <div class="form-row">
            <div class="form-group col">
                <label for="Name" class="control-label">輸入你的問題</label>
                <div class="row">
                    <div class="col-11">
                        <SfTextBox Type="InputType.Password" Multiline="true" Placeholder="請使用自然語言來描述你的問題，越詳盡越好"
                                   rows="3"
                        @bind-Value="ViewModel.ChatEmbeddingModel.Question"></SfTextBox>
                    </div>
                    <div class="col-1 d-flex justify-content-center align-items-center">
                        @if (ViewModel.ChatEmbeddingModel.DoSearching == true)
                        {
                            <SfProgressBar Type="ProgressType.Circular" Value="20" Width="60px" Height="60px"
                                           StartAngle="180" EndAngle="180" CornerRadius="CornerType.Round"
                                           IsIndeterminate="true" Minimum="0" Maximum="100">
                                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0"></ProgressBarAnimation>
                            </SfProgressBar>
                        }
                        else
                        {
                            <span class="mdi mdi-36px mdi-send" @onclick="DoSearchAsync"></span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<SfDialog @bind-Visible="@ViewModel.ShowUploadDialog" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>上傳檔案</Header>
        <Content>
            <RootFileUploadView />
        </Content>
        <FooterTemplate>
            <div>
                <SfButton CssClass="e-secondary" @onclick="ViewModel.CloseUploadFileAsync">關閉</SfButton>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<MessageBox Height="@ViewModel.MessageBox.Height" Width="@ViewModel.MessageBox.Width"
            IsVisible="@ViewModel.MessageBox.IsVisible"
            Title="@ViewModel.MessageBox.Title" Message="@ViewModel.MessageBox.Body"
            Callback="ViewModel.MessageBox.MessageDelegate" />

<DialogBackground />

@code {
    string versionNumber = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        Version version = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;
        versionNumber = version.ToString();
    }

    async Task DoSearchAsync()
    {
        ViewModel.ChatEmbeddingModel.SearchResult.Clear();
        List<GptEmbeddingCosineResultItem> gptResult = await ViewModel.SendQuestionAsync();
        foreach (var item in gptResult)
        {
            ViewModel.ChatEmbeddingModel.SearchResult.Add(new SearchResult()
                {
                    GptEmbeddingItem = item.GptEmbeddingItem,
                    CosineSimilarity = String.Format("{0:0.0000}", item.CosineSimilarity),
                    ShowEmbeddingText = false
                });
        }
    }

    async Task DownloadFileAsync(SearchResult searchResult)
    {
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-7.0
        string filename = searchResult.GptEmbeddingItem.ExpertFileChunk.ExpertFile.FileName;
        string fullfilename = searchResult.GptEmbeddingItem.ExpertFileChunk.ExpertFile.FullName;

        var fileStream = ViewModel.GetFileStream(fullfilename);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }
    void Navigate(string path)
    {
        NavigationManager.NavigateTo(path, true);
    }
}

